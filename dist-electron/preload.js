"use strict";const c=require("electron"),d=require("archiver"),s=require("fs"),f=(e,o)=>new Promise((n,r)=>{try{const t=s.createWriteStream(e),i=d("zip",{zlib:{level:9}});console.log("archive",i),i.on("error",function(a){throw a}),i.pipe(t),i.directory(o,!1),i.finalize(),t.on("close",function(){console.log(i.pointer()+" total bytes"),console.log("archiver has been finalized and the output file descriptor has closed."),n("success")}),t.on("finish",function(){console.log("The file has been finalized and the output file descriptor has finseed.")})}catch(t){r(t)}});function l(e){console.log("fs",s),s.readdirSync(e).forEach(n=>{const r=`${e}/${n}`;console.log("filePath",r);const t=s.statSync(r);console.log("stats",t),s.lstatSync(r).isDirectory()?l(r):s.unlinkSync(r)})}c.contextBridge.exposeInMainWorld("ipcRenderer",{on(...e){const[o,n]=e;return c.ipcRenderer.on(o,(r,...t)=>n(r,...t))},off(...e){const[o,...n]=e;return c.ipcRenderer.off(o,...n)},send(...e){const[o,...n]=e;return c.ipcRenderer.send(o,...n)},invoke(...e){const[o,...n]=e;return c.ipcRenderer.invoke(o,...n)},nodeParams:{dirname:__dirname,filename:__filename},nodeModules:{fs:require("fs"),path:require("path"),fsExtra:require("fs-extra"),archiver:require("archiver"),generatePackage:f,cwd:process.cwd,emptyDir:l}});window.addEventListener("DOMContentLoaded",()=>{console.log("process1222------------------",process)});
